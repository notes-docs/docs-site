name: Publish to GitHub Pages
on:
  push:
    branches: [master]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
concurrency:
  group: github-pages
  cancel-in-progress: false
# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

env:
  GIT_CREDENTIALS: https://${{ secrets.PAGE_TOKEN }}:@github.com

jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: List Environment Variables
        run: env
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Configure Pages
        uses: actions/configure-pages@v3
        with:
          token: ${{ secrets.PAGE_TOKEN }}
          enablement: true
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install Antora with the Antora Lunr Extension
        run: npm i antora @antora/lunr-extension nodejieba
      - name: Generate Site
        run: npx antora antora-playbook.yml --stacktrace

      # ========== 新增跨仓库图片上传步骤 ==========
      - name: Setup Image Repository
        uses: actions/checkout@v4
        with:
          repository: notes-docs/note-image1  # 替换为实际图片仓库
          token: ${{ secrets.PAGE_TOKEN }}       # 存储有推送权限的PAT
          path: image-repo                      # 本地克隆路径
          ref: gh-pages                         # 目标仓库的Pages分支

      - name: Sync Images
        run: |
          # 同步图片到目标仓库目录（保留历史版本）
          # rsync -avh --delete ./build/site/images/ ./image-repo/assets/
          # rsync -avh --delete --remove-source-files --include='*/' --include='images/**' --exclude='*' --prune-empty-dirs ./build/site/ ./image-repo/assets/

          # 指定源目录和目标目录
          SOURCE_DIR="./build/site"
          DEST_DIR="./image-repo/assets"
          # 清空目录
          if [ -d "$DEST_DIR" ]; then
            # 使用 find 命令查找并删除所有文件和子目录
            find "$DEST_DIR" -mindepth 1 -delete
          else
            echo "Error: Destination directory does not exist."
          fi
          
          while IFS= read -r images_dir; do
            # 获取相对路径，用于在目标目录中创建对应结构
            RELATIVE_PATH="${images_dir#$SOURCE_DIR}"
            echo $RELATIVE_PATH
            echo ${RELATIVE_PATH%%/*}
            rsync -avh --remove-source-files "$images_dir/" "$DEST_DIR/${RELATIVE_PATH%%/*}/"
          done < <(find "$SOURCE_DIR" -type d -name "_images")
          
          # 配置Git身份
          cd image-repo
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 提交变更
          git add .
          git commit -m "Auto-update: $(date +'%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"

          # 强制推送更新
          git push origin gh-pages --force

      # ========== 原有上传步骤 ==========
      - name: Upload Artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: build/site
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
